rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function loggedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      let admins = get(/databases/$(database)/documents/sections/jZbFyscc23zjkEGRuPAI).data.admins;
      return request.auth.uid != null && admins != null && request.auth.uid in admins;
    }

    // Users may only read their own profile
    match /users/{userId} {
      function usersOwnDoc() {
        return request.auth.uid == userId;
      }
      function notUpdatingStatus() {
        return !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status']);
      }

      allow create: if loggedIn() && request.resource.id == request.auth.uid;
      allow read:   if loggedIn() && (usersOwnDoc() || isAdmin());
      allow update: if loggedIn() && (usersOwnDoc() && notUpdatingStatus()) || isAdmin();
      allow delete: if loggedIn() && usersOwnDoc();
    }

    match /sections/{sectionId} {
      allow read: if true;

      match /shifts/{shiftId} {
        function onlyChangingReservation() {
          return request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['reservedBy', 'reservedDetails']);
        }
        function userIsReservingForThemself() {
          return resource.data.reservedBy == null 
            && request.resource.data.reservedBy == request.auth.uid;
        }
        function userAlreadyReserved() {
          return resource.data.reservedBy == request.auth.uid;
        }

        allow read: if loggedIn();
        allow update: if onlyChangingReservation() 
          && (userIsReservingForThemself() || userAlreadyReserved()) 
          || isAdmin();
      }
    }
  }
}
